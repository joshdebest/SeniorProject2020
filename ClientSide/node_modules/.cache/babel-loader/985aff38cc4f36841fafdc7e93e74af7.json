{"ast":null,"code":"const moment = require('moment');\n/*\n * Handles events that occur the same day of the month\n * (e.g. first Friday, last Monday)\n */\n// handleDayOfMonth :: String -> Int -> {} -> [{}]\n\n\nconst handleDayOfMonth = (calendar, recurrence, e) => {\n  const start = e.start.date ? moment(e.start.date) : moment(e.start.dateTime);\n  const end = e.end.date ? moment(e.start.date) : moment(e.end.dateTime);\n  const day = start.day();\n  const date = start.date();\n  let counter;\n\n  if (date <= 7) {\n    counter = 1;\n  } else if (date > 7 && date <= 14) {\n    counter = 7;\n  } else if (date > 14 && date <= 21) {\n    counter = 14;\n  } else if (date > 21 && date <= 28) {\n    counter = 21;\n  } else {\n    counter = 28;\n  }\n\n  let reoccurringEvents = [{\n    eventType: calendar.name,\n    creator: e.creator,\n    end: end._d,\n    gLink: e.htmlLink,\n    description: e.description,\n    location: e.location,\n    start: start._d,\n    title: e.summary,\n    meta: e\n  }];\n\n  while (recurrence > 0) {\n    let tempCounter = counter; // Using variables 'recurrence' and 'tempCounter' doesn't work with Moment\n\n    let nextStart = new Date(start.year(), start.month() + recurrence, tempCounter, start.hour(), start.minutes());\n    let nextEnd = new Date(end.year(), end.month() + recurrence, tempCounter, end.hour(), end.minutes());\n\n    while (tempCounter < 31) {\n      let isEqual = nextStart.getDay() == start.day();\n\n      if (isEqual) {\n        const reoccurringEvent = {\n          eventType: calendar.name,\n          creator: e.creator,\n          end: nextEnd,\n          gLink: e.htmlLink,\n          description: e.description,\n          location: e.location,\n          start: nextStart,\n          title: e.summary,\n          meta: e\n        };\n        reoccurringEvents.push(reoccurringEvent);\n        tempCounter = counter;\n        break;\n      }\n\n      nextStart = new Date(start.year(), start.month() + recurrence, tempCounter, start.hour(), start.minutes());\n      nextEnd = new Date(end.year(), end.month() + recurrence, tempCounter, end.hour(), end.minutes());\n      tempCounter++;\n    }\n\n    recurrence--;\n  }\n\n  return reoccurringEvents;\n};\n\nmodule.exports = handleDayOfMonth;","map":{"version":3,"sources":["/Users/joshdebest/SeniorProject2020/ClientSide/src/components/Pages/Calendar/utils/algorithms/handleDayOfMonth.js"],"names":["moment","require","handleDayOfMonth","calendar","recurrence","e","start","date","dateTime","end","day","counter","reoccurringEvents","eventType","name","creator","_d","gLink","htmlLink","description","location","title","summary","meta","tempCounter","nextStart","Date","year","month","hour","minutes","nextEnd","isEqual","getDay","reoccurringEvent","push","module","exports"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;AAEA;;;;AAKA;;;AACA,MAAMC,gBAAgB,GAAG,CAACC,QAAD,EAAWC,UAAX,EAAuBC,CAAvB,KAA6B;AACpD,QAAMC,KAAK,GAAGD,CAAC,CAACC,KAAF,CAAQC,IAAR,GACVP,MAAM,CAACK,CAAC,CAACC,KAAF,CAAQC,IAAT,CADI,GAEVP,MAAM,CAACK,CAAC,CAACC,KAAF,CAAQE,QAAT,CAFV;AAGA,QAAMC,GAAG,GAAGJ,CAAC,CAACI,GAAF,CAAMF,IAAN,GACRP,MAAM,CAACK,CAAC,CAACC,KAAF,CAAQC,IAAT,CADE,GAERP,MAAM,CAACK,CAAC,CAACI,GAAF,CAAMD,QAAP,CAFV;AAIA,QAAME,GAAG,GAAGJ,KAAK,CAACI,GAAN,EAAZ;AACA,QAAMH,IAAI,GAAGD,KAAK,CAACC,IAAN,EAAb;AACA,MAAII,OAAJ;;AAEA,MAAIJ,IAAI,IAAI,CAAZ,EAAe;AACbI,IAAAA,OAAO,GAAG,CAAV;AACD,GAFD,MAEO,IAAKJ,IAAI,GAAE,CAAP,IAAcA,IAAI,IAAI,EAA1B,EAA+B;AACpCI,IAAAA,OAAO,GAAG,CAAV;AACD,GAFM,MAEA,IAAKJ,IAAI,GAAG,EAAR,IAAgBA,IAAI,IAAI,EAA5B,EAAiC;AACtCI,IAAAA,OAAO,GAAG,EAAV;AACD,GAFM,MAEA,IAAKJ,IAAI,GAAG,EAAR,IAAgBA,IAAI,IAAI,EAA5B,EAAiC;AACtCI,IAAAA,OAAO,GAAG,EAAV;AACD,GAFM,MAEA;AACLA,IAAAA,OAAO,GAAG,EAAV;AACD;;AAED,MAAIC,iBAAiB,GAAG,CACtB;AACEC,IAAAA,SAAS,EAAEV,QAAQ,CAACW,IADtB;AAEEC,IAAAA,OAAO,EAAEV,CAAC,CAACU,OAFb;AAGEN,IAAAA,GAAG,EAAEA,GAAG,CAACO,EAHX;AAIEC,IAAAA,KAAK,EAAEZ,CAAC,CAACa,QAJX;AAKEC,IAAAA,WAAW,EAAEd,CAAC,CAACc,WALjB;AAMEC,IAAAA,QAAQ,EAAEf,CAAC,CAACe,QANd;AAOEd,IAAAA,KAAK,EAAEA,KAAK,CAACU,EAPf;AAQEK,IAAAA,KAAK,EAAEhB,CAAC,CAACiB,OARX;AASEC,IAAAA,IAAI,EAAElB;AATR,GADsB,CAAxB;;AAcA,SAAOD,UAAU,GAAG,CAApB,EAAuB;AACrB,QAAIoB,WAAW,GAAGb,OAAlB,CADqB,CAErB;;AACA,QAAIc,SAAS,GAAG,IAAIC,IAAJ,CAASpB,KAAK,CAACqB,IAAN,EAAT,EAAuBrB,KAAK,CAACsB,KAAN,KAAgBxB,UAAvC,EAAmDoB,WAAnD,EAAgElB,KAAK,CAACuB,IAAN,EAAhE,EAA8EvB,KAAK,CAACwB,OAAN,EAA9E,CAAhB;AACA,QAAIC,OAAO,GAAG,IAAIL,IAAJ,CAASjB,GAAG,CAACkB,IAAJ,EAAT,EAAqBlB,GAAG,CAACmB,KAAJ,KAAcxB,UAAnC,EAA+CoB,WAA/C,EAA4Df,GAAG,CAACoB,IAAJ,EAA5D,EAAwEpB,GAAG,CAACqB,OAAJ,EAAxE,CAAd;;AAEA,WAAON,WAAW,GAAG,EAArB,EAAyB;AACvB,UAAIQ,OAAO,GAAGP,SAAS,CAACQ,MAAV,MAAsB3B,KAAK,CAACI,GAAN,EAApC;;AAEA,UAAIsB,OAAJ,EAAa;AACX,cAAME,gBAAgB,GAAG;AACvBrB,UAAAA,SAAS,EAAEV,QAAQ,CAACW,IADG;AAEvBC,UAAAA,OAAO,EAAEV,CAAC,CAACU,OAFY;AAGvBN,UAAAA,GAAG,EAAEsB,OAHkB;AAIvBd,UAAAA,KAAK,EAAEZ,CAAC,CAACa,QAJc;AAKvBC,UAAAA,WAAW,EAAEd,CAAC,CAACc,WALQ;AAMvBC,UAAAA,QAAQ,EAAEf,CAAC,CAACe,QANW;AAOvBd,UAAAA,KAAK,EAAEmB,SAPgB;AAQvBJ,UAAAA,KAAK,EAAEhB,CAAC,CAACiB,OARc;AASvBC,UAAAA,IAAI,EAAElB;AATiB,SAAzB;AAWAO,QAAAA,iBAAiB,CAACuB,IAAlB,CAAuBD,gBAAvB;AACAV,QAAAA,WAAW,GAAGb,OAAd;AACA;AACD;;AAEDc,MAAAA,SAAS,GAAG,IAAIC,IAAJ,CAASpB,KAAK,CAACqB,IAAN,EAAT,EAAuBrB,KAAK,CAACsB,KAAN,KAAgBxB,UAAvC,EAAmDoB,WAAnD,EAAgElB,KAAK,CAACuB,IAAN,EAAhE,EAA8EvB,KAAK,CAACwB,OAAN,EAA9E,CAAZ;AACAC,MAAAA,OAAO,GAAG,IAAIL,IAAJ,CAASjB,GAAG,CAACkB,IAAJ,EAAT,EAAqBlB,GAAG,CAACmB,KAAJ,KAAcxB,UAAnC,EAA+CoB,WAA/C,EAA4Df,GAAG,CAACoB,IAAJ,EAA5D,EAAwEpB,GAAG,CAACqB,OAAJ,EAAxE,CAAV;AACAN,MAAAA,WAAW;AACZ;;AACDpB,IAAAA,UAAU;AACX;;AACD,SAAOQ,iBAAP;AACD,CAvED;;AAyEAwB,MAAM,CAACC,OAAP,GAAiBnC,gBAAjB","sourcesContent":["const moment = require('moment')\n\n/*\n * Handles events that occur the same day of the month\n * (e.g. first Friday, last Monday)\n */\n\n// handleDayOfMonth :: String -> Int -> {} -> [{}]\nconst handleDayOfMonth = (calendar, recurrence, e) => {\n  const start = e.start.date\n    ? moment(e.start.date)\n    : moment(e.start.dateTime)\n  const end = e.end.date\n    ? moment(e.start.date)\n    : moment(e.end.dateTime)\n\n  const day = start.day()\n  const date = start.date()\n  let counter\n\n  if (date <= 7) {\n    counter = 1\n  } else if ((date >7) && (date <= 14)) {\n    counter = 7\n  } else if ((date > 14) && (date <= 21)) {\n    counter = 14\n  } else if ((date > 21) && (date <= 28)) {\n    counter = 21\n  } else {\n    counter = 28\n  }\n\n  let reoccurringEvents = [\n    {\n      eventType: calendar.name,\n      creator: e.creator,\n      end: end._d,\n      gLink: e.htmlLink,\n      description: e.description,\n      location: e.location,\n      start: start._d,\n      title: e.summary,\n      meta: e\n    }\n  ]\n\n  while (recurrence > 0) {\n    let tempCounter = counter\n    // Using variables 'recurrence' and 'tempCounter' doesn't work with Moment\n    let nextStart = new Date(start.year(), start.month() + recurrence, tempCounter, start.hour(), start.minutes())\n    let nextEnd = new Date(end.year(), end.month() + recurrence, tempCounter, end.hour(), end.minutes())\n\n    while (tempCounter < 31) {\n      let isEqual = nextStart.getDay() == start.day()\n\n      if (isEqual) {\n        const reoccurringEvent = {\n          eventType: calendar.name,\n          creator: e.creator,\n          end: nextEnd,\n          gLink: e.htmlLink,\n          description: e.description,\n          location: e.location,\n          start: nextStart,\n          title: e.summary,\n          meta: e\n        }\n        reoccurringEvents.push(reoccurringEvent)\n        tempCounter = counter\n        break\n      }\n\n      nextStart = new Date(start.year(), start.month() + recurrence, tempCounter, start.hour(), start.minutes())\n      nextEnd = new Date(end.year(), end.month() + recurrence, tempCounter, end.hour(), end.minutes())\n      tempCounter ++\n    }\n    recurrence --\n  }\n  return reoccurringEvents\n}\n\nmodule.exports = handleDayOfMonth"]},"metadata":{},"sourceType":"module"}
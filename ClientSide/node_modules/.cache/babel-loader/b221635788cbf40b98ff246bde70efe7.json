{"ast":null,"code":"const moment = require('moment');\n/*\n * Handles events that occure the same date of every month\n * (e.g. the 1st, the 8th)\n */\n// handleDateOfMonth :: String -> Int -> {} -> [{}]\n\n\nconst handleDateOfMonth = (calendar, recurrence, e) => {\n  const start = e.start.date ? moment(e.start.date) : moment(e.start.dateTime);\n  const end = e.end.date ? moment(e.start.date) : moment(e.end.dateTime);\n  let reoccurringEvents = [{\n    eventType: calendar.name,\n    creator: e.creator,\n    end: end._d,\n    gLink: e.htmlLink,\n    description: e.description,\n    location: e.location,\n    start: start._d,\n    title: e.summary,\n    meta: e\n  }];\n  let add = 1;\n\n  while (recurrence > 0) {\n    const reoccurringEvent = {\n      eventType: calendar.name,\n      creator: e.creator,\n      end: end.clone().add(add, 'months')._d,\n      gLink: e.htmlLink,\n      description: e.description,\n      location: e.location,\n      start: start.clone().add(add, 'months')._d,\n      title: e.summary,\n      meta: e\n    };\n    reoccurringEvents.push(reoccurringEvent);\n    recurrence--;\n    add++;\n  }\n\n  return reoccurringEvents;\n};\n\nmodule.exports = handleDateOfMonth;","map":{"version":3,"sources":["/Users/joshdebest/SeniorProject2020/ClientSide/src/components/Pages/Calendar/utils/algorithms/handleDateOfMonth.js"],"names":["moment","require","handleDateOfMonth","calendar","recurrence","e","start","date","dateTime","end","reoccurringEvents","eventType","name","creator","_d","gLink","htmlLink","description","location","title","summary","meta","add","reoccurringEvent","clone","push","module","exports"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;AAEA;;;;AAKA;;;AACC,MAAMC,iBAAiB,GAAG,CAACC,QAAD,EAAWC,UAAX,EAAuBC,CAAvB,KAA6B;AACrD,QAAMC,KAAK,GAAGD,CAAC,CAACC,KAAF,CAAQC,IAAR,GACVP,MAAM,CAACK,CAAC,CAACC,KAAF,CAAQC,IAAT,CADI,GAEVP,MAAM,CAACK,CAAC,CAACC,KAAF,CAAQE,QAAT,CAFV;AAGA,QAAMC,GAAG,GAAGJ,CAAC,CAACI,GAAF,CAAMF,IAAN,GACRP,MAAM,CAACK,CAAC,CAACC,KAAF,CAAQC,IAAT,CADE,GAERP,MAAM,CAACK,CAAC,CAACI,GAAF,CAAMD,QAAP,CAFV;AAIA,MAAIE,iBAAiB,GAAG,CACtB;AACEC,IAAAA,SAAS,EAAER,QAAQ,CAACS,IADtB;AAEEC,IAAAA,OAAO,EAAER,CAAC,CAACQ,OAFb;AAGEJ,IAAAA,GAAG,EAAEA,GAAG,CAACK,EAHX;AAIEC,IAAAA,KAAK,EAAEV,CAAC,CAACW,QAJX;AAKEC,IAAAA,WAAW,EAAEZ,CAAC,CAACY,WALjB;AAMEC,IAAAA,QAAQ,EAAEb,CAAC,CAACa,QANd;AAOEZ,IAAAA,KAAK,EAAEA,KAAK,CAACQ,EAPf;AAQEK,IAAAA,KAAK,EAAEd,CAAC,CAACe,OARX;AASEC,IAAAA,IAAI,EAAEhB;AATR,GADsB,CAAxB;AAaA,MAAIiB,GAAG,GAAG,CAAV;;AAEA,SAAOlB,UAAU,GAAG,CAApB,EAAuB;AACrB,UAAMmB,gBAAgB,GAAG;AACvBZ,MAAAA,SAAS,EAAER,QAAQ,CAACS,IADG;AAEvBC,MAAAA,OAAO,EAAER,CAAC,CAACQ,OAFY;AAGvBJ,MAAAA,GAAG,EAAEA,GAAG,CAACe,KAAJ,GAAYF,GAAZ,CAAgBA,GAAhB,EAAqB,QAArB,EAA+BR,EAHb;AAIvBC,MAAAA,KAAK,EAAEV,CAAC,CAACW,QAJc;AAKvBC,MAAAA,WAAW,EAAEZ,CAAC,CAACY,WALQ;AAMvBC,MAAAA,QAAQ,EAAEb,CAAC,CAACa,QANW;AAOvBZ,MAAAA,KAAK,EAAEA,KAAK,CAACkB,KAAN,GAAcF,GAAd,CAAkBA,GAAlB,EAAuB,QAAvB,EAAiCR,EAPjB;AAQvBK,MAAAA,KAAK,EAAEd,CAAC,CAACe,OARc;AASvBC,MAAAA,IAAI,EAAEhB;AATiB,KAAzB;AAWAK,IAAAA,iBAAiB,CAACe,IAAlB,CAAuBF,gBAAvB;AACAnB,IAAAA,UAAU;AACVkB,IAAAA,GAAG;AACJ;;AACD,SAAOZ,iBAAP;AACD,CAxCD;;AA0CDgB,MAAM,CAACC,OAAP,GAAiBzB,iBAAjB","sourcesContent":["const moment = require('moment')\n\n/*\n * Handles events that occure the same date of every month\n * (e.g. the 1st, the 8th)\n */\n\n// handleDateOfMonth :: String -> Int -> {} -> [{}]\n const handleDateOfMonth = (calendar, recurrence, e) => {\n   const start = e.start.date\n     ? moment(e.start.date)\n     : moment(e.start.dateTime)\n   const end = e.end.date\n     ? moment(e.start.date)\n     : moment(e.end.dateTime)\n\n   let reoccurringEvents = [\n     {\n       eventType: calendar.name,\n       creator: e.creator,\n       end: end._d,\n       gLink: e.htmlLink,\n       description: e.description,\n       location: e.location,\n       start: start._d,\n       title: e.summary,\n       meta: e\n     }\n   ]\n   let add = 1\n\n   while (recurrence > 0) {\n     const reoccurringEvent = {\n       eventType: calendar.name,\n       creator: e.creator,\n       end: end.clone().add(add, 'months')._d,\n       gLink: e.htmlLink,\n       description: e.description,\n       location: e.location,\n       start: start.clone().add(add, 'months')._d,\n       title: e.summary,\n       meta: e\n     }\n     reoccurringEvents.push(reoccurringEvent)\n     recurrence --\n     add ++\n   }\n   return reoccurringEvents\n }\n\nmodule.exports = handleDateOfMonth"]},"metadata":{},"sourceType":"module"}
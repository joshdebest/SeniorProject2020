{"ast":null,"code":"const moment = require('moment');\n/*\n * Handles events that occur every 'n' number of days\n * (e.g. every day, every 5 days)\n */\n// handleDaily :: String -> Int -> {} -> [{}]\n\n\nconst handleDaily = (calendar, recurrence, e) => {\n  const start = e.start.date ? moment(e.start.date) : moment(e.start.dateTime);\n  const end = e.end.date ? moment(e.start.date) : moment(e.end.dateTime); // reformat reponse to get how many days between each recurrence\n\n  const wtfGoogle = e.recurrence[0].split(\";\").pop().split(\"=\").pop() !== \"DAILY\" ? parseInt(e.recurrence[0].split(\";\").pop().split(\"=\").pop()) : 1;\n  const n = wtfGoogle;\n  let add = wtfGoogle;\n  let reoccurringEvents = [{\n    eventType: calendar.name,\n    creator: e.creator,\n    end: end._d,\n    gLink: e.htmlLink,\n    description: e.description,\n    location: e.location,\n    start: start._d,\n    title: e.summary,\n    meta: e\n  }];\n\n  while (recurrence > 0) {\n    const reoccurringEvent = {\n      eventType: calendar.name,\n      creator: e.creator,\n      end: end.clone().add(add, 'days')._d,\n      gLink: e.htmlLink,\n      description: e.description,\n      location: e.location,\n      start: start.clone().add(add, 'days')._d,\n      title: e.summary,\n      meta: e\n    };\n    reoccurringEvents.push(reoccurringEvent);\n    recurrence--;\n    add += n;\n  }\n\n  return reoccurringEvents;\n};\n\nmodule.exports = handleDaily;","map":{"version":3,"sources":["/Users/joshdebest/SeniorProject2020/ClientSide/src/components/Pages/Calendar/utils/algorithms/handleDaily.js"],"names":["moment","require","handleDaily","calendar","recurrence","e","start","date","dateTime","end","wtfGoogle","split","pop","parseInt","n","add","reoccurringEvents","eventType","name","creator","_d","gLink","htmlLink","description","location","title","summary","meta","reoccurringEvent","clone","push","module","exports"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;AAEA;;;;AAKA;;;AACA,MAAMC,WAAW,GAAG,CAACC,QAAD,EAAWC,UAAX,EAAuBC,CAAvB,KAA6B;AAC/C,QAAMC,KAAK,GAAGD,CAAC,CAACC,KAAF,CAAQC,IAAR,GACVP,MAAM,CAACK,CAAC,CAACC,KAAF,CAAQC,IAAT,CADI,GAEVP,MAAM,CAACK,CAAC,CAACC,KAAF,CAAQE,QAAT,CAFV;AAGA,QAAMC,GAAG,GAAGJ,CAAC,CAACI,GAAF,CAAMF,IAAN,GACRP,MAAM,CAACK,CAAC,CAACC,KAAF,CAAQC,IAAT,CADE,GAERP,MAAM,CAACK,CAAC,CAACI,GAAF,CAAMD,QAAP,CAFV,CAJ+C,CAQ/C;;AACA,QAAME,SAAS,GAAIL,CAAC,CAACD,UAAF,CAAa,CAAb,EAAgBO,KAAhB,CAAsB,GAAtB,EAA2BC,GAA3B,GAAiCD,KAAjC,CAAuC,GAAvC,EAA4CC,GAA5C,OAAsD,OAAvD,GACdC,QAAQ,CAACR,CAAC,CAACD,UAAF,CAAa,CAAb,EAAgBO,KAAhB,CAAsB,GAAtB,EAA2BC,GAA3B,GAAiCD,KAAjC,CAAuC,GAAvC,EAA4CC,GAA5C,EAAD,CADM,GAEd,CAFJ;AAGA,QAAME,CAAC,GAAGJ,SAAV;AACA,MAAIK,GAAG,GAAGL,SAAV;AACA,MAAIM,iBAAiB,GAAG,CACtB;AACEC,IAAAA,SAAS,EAAEd,QAAQ,CAACe,IADtB;AAEEC,IAAAA,OAAO,EAAEd,CAAC,CAACc,OAFb;AAGEV,IAAAA,GAAG,EAAEA,GAAG,CAACW,EAHX;AAIEC,IAAAA,KAAK,EAAEhB,CAAC,CAACiB,QAJX;AAKEC,IAAAA,WAAW,EAAElB,CAAC,CAACkB,WALjB;AAMEC,IAAAA,QAAQ,EAAEnB,CAAC,CAACmB,QANd;AAOElB,IAAAA,KAAK,EAAEA,KAAK,CAACc,EAPf;AAQEK,IAAAA,KAAK,EAAEpB,CAAC,CAACqB,OARX;AASEC,IAAAA,IAAI,EAAEtB;AATR,GADsB,CAAxB;;AAcA,SAAOD,UAAU,GAAG,CAApB,EAAuB;AACrB,UAAMwB,gBAAgB,GAAG;AACvBX,MAAAA,SAAS,EAAEd,QAAQ,CAACe,IADG;AAEvBC,MAAAA,OAAO,EAAEd,CAAC,CAACc,OAFY;AAGvBV,MAAAA,GAAG,EAAEA,GAAG,CAACoB,KAAJ,GAAYd,GAAZ,CAAgBA,GAAhB,EAAqB,MAArB,EAA6BK,EAHX;AAIvBC,MAAAA,KAAK,EAAEhB,CAAC,CAACiB,QAJc;AAKvBC,MAAAA,WAAW,EAAElB,CAAC,CAACkB,WALQ;AAMvBC,MAAAA,QAAQ,EAAEnB,CAAC,CAACmB,QANW;AAOvBlB,MAAAA,KAAK,EAAEA,KAAK,CAACuB,KAAN,GAAcd,GAAd,CAAkBA,GAAlB,EAAuB,MAAvB,EAA+BK,EAPf;AAQvBK,MAAAA,KAAK,EAAEpB,CAAC,CAACqB,OARc;AASvBC,MAAAA,IAAI,EAAEtB;AATiB,KAAzB;AAWAW,IAAAA,iBAAiB,CAACc,IAAlB,CAAuBF,gBAAvB;AACAxB,IAAAA,UAAU;AACVW,IAAAA,GAAG,IAAID,CAAP;AACD;;AACD,SAAOE,iBAAP;AACD,CA7CD;;AA+CAe,MAAM,CAACC,OAAP,GAAiB9B,WAAjB","sourcesContent":["const moment = require('moment')\n\n/*\n * Handles events that occur every 'n' number of days\n * (e.g. every day, every 5 days)\n */\n\n// handleDaily :: String -> Int -> {} -> [{}]\nconst handleDaily = (calendar, recurrence, e) => {\n  const start = e.start.date\n    ? moment(e.start.date)\n    : moment(e.start.dateTime)\n  const end = e.end.date\n    ? moment(e.start.date)\n    : moment(e.end.dateTime)\n\n  // reformat reponse to get how many days between each recurrence\n  const wtfGoogle = (e.recurrence[0].split(\";\").pop().split(\"=\").pop() !== \"DAILY\")\n    ? parseInt(e.recurrence[0].split(\";\").pop().split(\"=\").pop())\n    : 1\n  const n = wtfGoogle\n  let add = wtfGoogle\n  let reoccurringEvents = [\n    {\n      eventType: calendar.name,\n      creator: e.creator,\n      end: end._d,\n      gLink: e.htmlLink,\n      description: e.description,\n      location: e.location,\n      start: start._d,\n      title: e.summary,\n      meta: e\n    }\n  ]\n\n  while (recurrence > 0) {\n    const reoccurringEvent = {\n      eventType: calendar.name,\n      creator: e.creator,\n      end: end.clone().add(add, 'days')._d,\n      gLink: e.htmlLink,\n      description: e.description,\n      location: e.location,\n      start: start.clone().add(add, 'days')._d,\n      title: e.summary,\n      meta: e\n    }\n    reoccurringEvents.push(reoccurringEvent)\n    recurrence --\n    add += n\n  }\n  return reoccurringEvents\n}\n\nmodule.exports = handleDaily"]},"metadata":{},"sourceType":"module"}
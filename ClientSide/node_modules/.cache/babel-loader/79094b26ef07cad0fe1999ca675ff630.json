{"ast":null,"code":"// Interface to the REST server\nimport { Register } from \"./components/components\";\nconst baseURL = \"http://localhost:3001/\"; //const baseURL = \"http://www.debestrobotics.com/\";\n\nvar currSessionCookie;\nvar sessionId;\nconst headers = new Headers();\nheaders.set('Content-Type', 'application/JSON');\nconst reqConf = {\n  headers: headers,\n  credentials: 'include'\n};\n\nfunction myFetch(method, endpoint, body) {\n  return fetch(baseURL + endpoint, {\n    method: method,\n    body: body ? JSON.stringify(body) : undefined,\n    ...reqConf\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else return response; //.json().catch(err => {throw err});\n\n  });\n}\n\nexport function post(endpoint, body) {\n  return myFetch('POST', endpoint, body);\n} // GET/Usr/{email}\n\nexport function get(endpoint, body) {\n  return myFetch('GET', endpoint, body);\n} // GET/Usr \n//export function get(endpoint){\n//   return myFetch('GET', endpoint);\n//}\n\nexport function put(endpoint, body) {\n  return myFetch('PUT', endpoint, body);\n}\nexport function del(endpoint) {\n  return myFetch('DELETE', endpoint);\n} //  Functions for api requests\n\n/**\n * Register a user\n * @param {Object} User info\n * @returns {Promise resolving to new user registration}\n */\n\nexport function signUp(info) {\n  return post('Usr', info).catch(err => {\n    throw err;\n  });\n}\nexport function templogIn(creds) {\n  return post('Ssns', creds).catch(err => {\n    throw err;\n  });\n}\nexport function logOut() {\n  return del('Ssns/' + currSessionCookie).catch(err => {\n    throw err;\n  });\n}\nexport function logIn(cred) {\n  return post(\"Ssns\", cred).then(rsp => cred).catch(err => {\n    throw err;\n  });\n  /*       .then(response => {\n           let location = response.headers.get(\"Location\").split('/');\n           sessionId = location[location.length - 1];\n           console.log(\"Got session \" + sessionId);\n           return get(\"Ssns/\" + sessionId)\n        })\n        .then(response => response.json())   // ..json() returns a Promise!\n        .then(rsp => get('Prss/' + rsp.prsId))\n        .then(userResponse => userResponse.json())\n        .then(rsp => rsp[0])\n        .catch(err => {console.log('err was this',err);throw err})  */\n}\nexport function register(newUser) {\n  return post('Usr', newUser).then(rsp => newUser).catch(err => {\n    throw err;\n  });\n}\n/**\n * @param User email to index database\n * @returns {Promise} json parsed data\n */\n\nexport function getUser(email) {\n  return get('Usr/' + email).then(res => res.json()).catch(err => {\n    throw err;\n  });\n}","map":{"version":3,"sources":["/Users/joshdebest/SeniorProject2020/ClientSide/src/api.js"],"names":["Register","baseURL","currSessionCookie","sessionId","headers","Headers","set","reqConf","credentials","myFetch","method","endpoint","body","fetch","JSON","stringify","undefined","then","response","ok","post","get","put","del","signUp","info","catch","err","templogIn","creds","logOut","logIn","cred","rsp","register","newUser","getUser","email","res","json"],"mappings":"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","sourcesContent":["// Interface to the REST server\n\nimport { Register } from \"./components/components\";\n\nconst baseURL = \"http://localhost:3001/\";\n//const baseURL = \"http://www.debestrobotics.com/\";\n\nvar currSessionCookie;\nvar sessionId;\n\nconst headers = new Headers();\nheaders.set('Content-Type', 'application/JSON');\nconst reqConf = {\n   headers: headers,\n   credentials: 'include',\n};\n\nfunction myFetch(method, endpoint, body){\n   return fetch(baseURL + endpoint, {\n      method: method,\n      body: (body ? JSON.stringify(body) : undefined),\n      ...reqConf\n   }).then(response => {\n      if (response.ok){\n         return response;\n      }\n      else\n         return response;//.json().catch(err => {throw err});\n   })\n}\n\nexport function post(endpoint, body){\n   return myFetch('POST', endpoint, body);\n}\n// GET/Usr/{email}\nexport function get(endpoint, body){\n   return myFetch('GET', endpoint, body);\n}\n// GET/Usr \n//export function get(endpoint){\n//   return myFetch('GET', endpoint);\n//}\n\nexport function put(endpoint, body){\n   return myFetch('PUT', endpoint, body);\n}\nexport function del(endpoint){\n   return myFetch('DELETE', endpoint);\n}\n\n//  Functions for api requests\n\n/**\n * Register a user\n * @param {Object} User info\n * @returns {Promise resolving to new user registration}\n */\nexport function signUp(info){\n   return post('Usr', info).catch(err => {throw err});\n}\n\nexport function templogIn(creds){\n   return post('Ssns', creds).catch(err => {throw err});\n}\n\nexport function logOut(){\n   return del('Ssns/' + currSessionCookie).catch(err => {throw err});\n}\n\nexport function logIn(cred) {\n   return post(\"Ssns\", cred).then(rsp => cred).catch(err => {throw err});\n/*       .then(response => {\n         let location = response.headers.get(\"Location\").split('/');\n         sessionId = location[location.length - 1];\n         console.log(\"Got session \" + sessionId);\n         return get(\"Ssns/\" + sessionId)\n      })\n      .then(response => response.json())   // ..json() returns a Promise!\n      .then(rsp => get('Prss/' + rsp.prsId))\n      .then(userResponse => userResponse.json())\n      .then(rsp => rsp[0])\n      .catch(err => {console.log('err was this',err);throw err})  */\n}\n\nexport function register(newUser){\n   return post('Usr', newUser).then(rsp => newUser).catch(err => {throw err});\n}\n\n/**\n * @param User email to index database\n * @returns {Promise} json parsed data\n */\nexport function getUser(email) {\n   return get ('Usr/' + email)\n   .then(res => res.json())\n   .catch(err => {throw err});\n}\n"]},"metadata":{},"sourceType":"module"}
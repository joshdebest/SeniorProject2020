{"ast":null,"code":"import * as Promise from 'bluebird';\nimport moment from 'moment';\nimport { handleDaily, handleDateOfMonth, handleDayOfMonth, handleWeekly } from './algorithms';\nimport { filterByOneProperty, filterIncludesString, oneTime, recurring, recurringByProperty, removeCancelled, removeRecurrenceProperty } from './functions';\nObject.defineProperty(Array.prototype, 'flat', {\n  value: function (depth = 1) {\n    return this.reduce(function (flat, toFlatten) {\n      return flat.concat(Array.isArray(toFlatten) && depth - 1 ? toFlatten.flat(depth - 1) : toFlatten);\n    }, []);\n  }\n});\nexport default {\n  /*\n   * Get events from all calendars specified and created specified number of recurring events\n   */\n  getAllCalendars: config => Promise.map(config.calendars, calendar => {\n    // get each calendar\n    return fetch(`https://content.googleapis.com/calendar/v3/calendars/${calendar.url}/events?key=${config.api_key}`).then(res => res.json()).then(res => {\n      const items = res.items;\n      const events = removeCancelled(items);\n      const oneTimeEvents = oneTime(calendar, events);\n      const recurringEvents = recurring(events);\n      const daily = filterByOneProperty(\"RRULE:FREQ=DAILY\", recurringEvents);\n      const recurringDaily = recurringByProperty(removeRecurrenceProperty(daily), handleDaily, calendar, config.dailyRecurrence).flat();\n      const weekly = filterByOneProperty(\"RRULE:FREQ=WEEKLY\", recurringEvents);\n      const recurringWeekly = recurringByProperty(removeRecurrenceProperty(weekly), handleWeekly, calendar, config.weeklyRecurrence).flat();\n      const monthly = filterByOneProperty(\"RRULE:FREQ=MONTHLY\", recurringEvents); // dateOfMonth will have only one item in the array, so this will verify \"RRULE:FREQ=MONTHLY\"\n\n      const dateOfMonth = monthly.filter(item => filterIncludesString(item.r, \"TH\")); // however, dayOfMonth will have two items in the array\n      // the second item will be like \"BYDAY=1FR\"\n\n      const dayOfMonth = monthly.filter(item => !filterIncludesString(item.r, \"TH\"));\n      const recurringDateOfMonth = recurringByProperty(removeRecurrenceProperty(dateOfMonth), handleDateOfMonth, calendar, config.monthlyRecurrence).flat();\n      const recurringDayOfMonth = recurringByProperty(removeRecurrenceProperty(dayOfMonth), handleDayOfMonth, calendar, config.monthlyRecurrence).flat();\n      const allEvents = [].concat(oneTimeEvents, recurringDaily, recurringWeekly, recurringDateOfMonth, recurringDayOfMonth);\n      return allEvents.flat();\n    });\n  }).then(allEvents => [].concat.apply([], allEvents))\n};","map":{"version":3,"sources":["/Users/joshdebest/SeniorProject2020/ClientSide/src/components/Pages/Calendar/utils/googleAPI.js"],"names":["Promise","moment","handleDaily","handleDateOfMonth","handleDayOfMonth","handleWeekly","filterByOneProperty","filterIncludesString","oneTime","recurring","recurringByProperty","removeCancelled","removeRecurrenceProperty","Object","defineProperty","Array","prototype","value","depth","reduce","flat","toFlatten","concat","isArray","getAllCalendars","config","map","calendars","calendar","fetch","url","api_key","then","res","json","items","events","oneTimeEvents","recurringEvents","daily","recurringDaily","dailyRecurrence","weekly","recurringWeekly","weeklyRecurrence","monthly","dateOfMonth","filter","item","r","dayOfMonth","recurringDateOfMonth","monthlyRecurrence","recurringDayOfMonth","allEvents","apply"],"mappings":"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","sourcesContent":["import * as Promise from 'bluebird'\nimport moment from 'moment'\n\nimport {\n  handleDaily,\n  handleDateOfMonth,\n  handleDayOfMonth,\n  handleWeekly\n} from './algorithms'\nimport {\n  filterByOneProperty,\n  filterIncludesString,\n  oneTime,\n  recurring,\n  recurringByProperty,\n  removeCancelled,\n  removeRecurrenceProperty\n} from './functions'\n\nObject.defineProperty(Array.prototype, 'flat', {\n    value: function(depth = 1) {\n      return this.reduce(function (flat, toFlatten) {\n        return flat.concat((Array.isArray(toFlatten) && (depth-1)) ? toFlatten.flat(depth-1) : toFlatten);\n      }, []);\n    }\n});\n\nexport default {\n\n  /*\n   * Get events from all calendars specified and created specified number of recurring events\n   */\n  getAllCalendars: (config) => Promise.map(config.calendars, (calendar) => {\n    // get each calendar\n    return fetch(`https://content.googleapis.com/calendar/v3/calendars/${calendar.url}/events?key=${config.api_key}`)\n      .then(res => res.json())\n      .then(res => {\n        const items = res.items\n        const events = removeCancelled(items)\n        const oneTimeEvents = oneTime(calendar, events)\n        const recurringEvents = recurring(events)\n\n        const daily = filterByOneProperty(\"RRULE:FREQ=DAILY\", recurringEvents)\n        const recurringDaily = recurringByProperty(\n          removeRecurrenceProperty(daily),\n          handleDaily,\n          calendar,\n          config.dailyRecurrence\n        ).flat()\n\n        const weekly = filterByOneProperty(\"RRULE:FREQ=WEEKLY\", recurringEvents)\n        const recurringWeekly = recurringByProperty(\n          removeRecurrenceProperty(weekly),\n          handleWeekly,\n          calendar,\n          config.weeklyRecurrence\n        ).flat()\n\n        const monthly = filterByOneProperty(\"RRULE:FREQ=MONTHLY\", recurringEvents)\n        // dateOfMonth will have only one item in the array, so this will verify \"RRULE:FREQ=MONTHLY\"\n        const dateOfMonth = monthly\n          .filter(item => filterIncludesString(item.r, \"TH\"))\n        // however, dayOfMonth will have two items in the array\n        // the second item will be like \"BYDAY=1FR\"\n        const dayOfMonth = monthly\n          .filter(item => !filterIncludesString(item.r, \"TH\"))\n\n        const recurringDateOfMonth = recurringByProperty(\n          removeRecurrenceProperty(dateOfMonth),\n          handleDateOfMonth,\n          calendar,\n          config.monthlyRecurrence\n        ).flat()\n        const recurringDayOfMonth = recurringByProperty(\n          removeRecurrenceProperty(dayOfMonth),\n          handleDayOfMonth,\n          calendar,\n          config.monthlyRecurrence\n        ).flat()\n\n        const allEvents = [].concat(\n          oneTimeEvents,\n          recurringDaily,\n          recurringWeekly,\n          recurringDateOfMonth,\n          recurringDayOfMonth\n        )\n        return allEvents.flat()\n      })\n  })\n  .then(allEvents => [].concat.apply([], allEvents))\n\n}"]},"metadata":{},"sourceType":"module"}
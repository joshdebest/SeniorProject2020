{"ast":null,"code":"import * as API from '../api';\nexport function register(new_user, cb) {\n  return (dispatch, prevState) => {\n    API.register(new_user).then(() => {\n      if (cb) cb();\n    }).catch(err => {\n      dispatch({\n        type: 'REGISTER_ERROR',\n        description: err\n      });\n    });\n  };\n}\nexport function logIn(cred, cb) {\n  return (dispatch, prevState) => {\n    API.logIn(cred).then(userInfo => dispatch({\n      type: 'LOGIN',\n      user: userInfo\n    })).then(() => {\n      if (cb) cb();\n    }).catch(err => {\n      console.log('err is', err);\n      dispatch({\n        type: 'LOGIN_ERR',\n        details: err\n      });\n    });\n  };\n}\nexport const insertToken = email => dispatch => {\n  let token;\n\n  if (email) {\n    token = email;\n    dispatch({\n      type: 'INSERT_TOKEN_SUCCESS',\n      payload: token\n    });\n  } else {\n    dispatch({\n      type: 'INSERT_TOKEN_FAIL'\n    });\n  }\n};","map":{"version":3,"sources":["/Users/joshdebest/SeniorProject2020/ClientSide/src/redux/actionCreators.js"],"names":["API","register","new_user","cb","dispatch","prevState","then","catch","err","type","description","logIn","cred","userInfo","user","console","log","details","insertToken","email","token","payload"],"mappings":"AAAA,OAAO,KAAKA,GAAZ,MAAqB,QAArB;AAEA,OAAO,SAASC,QAAT,CAAkBC,QAAlB,EAA4BC,EAA5B,EAA+B;AACnC,SAAO,CAACC,QAAD,EAAWC,SAAX,KAAyB;AAC7BL,IAAAA,GAAG,CAACC,QAAJ,CAAaC,QAAb,EACCI,IADD,CACM,MAAM;AAAC,UAAIH,EAAJ,EAAQA,EAAE;AACtB,KAFD,EAEGI,KAFH,CAESC,GAAG,IAAI;AAACJ,MAAAA,QAAQ,CAAC;AAACK,QAAAA,IAAI,EAAE,gBAAP;AAAyBC,QAAAA,WAAW,EAAEF;AAAtC,OAAD,CAAR;AAChB,KAHD;AAIF,GALD;AAMF;AAED,OAAO,SAASG,KAAT,CAAeC,IAAf,EAAqBT,EAArB,EAAyB;AAC7B,SAAO,CAACC,QAAD,EAAWC,SAAX,KAAyB;AAC7BL,IAAAA,GAAG,CAACW,KAAJ,CAAUC,IAAV,EACCN,IADD,CACOO,QAAD,IAAcT,QAAQ,CAAC;AAACK,MAAAA,IAAI,EAAE,OAAP;AAAgBK,MAAAA,IAAI,EAAED;AAAtB,KAAD,CAD5B,EAECP,IAFD,CAEM,MAAM;AAAC,UAAIH,EAAJ,EAAQA,EAAE;AAAI,KAF3B,EAGCI,KAHD,CAGOC,GAAG,IAAI;AAACO,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAqBR,GAArB;AAA0BJ,MAAAA,QAAQ,CAAC;AAACK,QAAAA,IAAI,EAAE,WAAP;AACjDQ,QAAAA,OAAO,EAAET;AADwC,OAAD,CAAR;AACzB,KAJhB;AAMF,GAPD;AAQF;AAED,OAAO,MAAMU,WAAW,GAAIC,KAAD,IAAWf,QAAQ,IAAI;AAC/C,MAAIgB,KAAJ;;AACA,MAAID,KAAJ,EAAW;AACTC,IAAAA,KAAK,GAAGD,KAAR;AACAf,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAE,sBADC;AAEPY,MAAAA,OAAO,EAAED;AAFF,KAAD,CAAR;AAID,GAND,MAMO;AACLhB,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAE;AADC,KAAD,CAAR;AAGD;AACF,CAbK","sourcesContent":["import * as API from '../api';\n\nexport function register(new_user, cb){\n   return (dispatch, prevState) => {\n      API.register(new_user)\n      .then(() => {if (cb) cb();\n      }).catch(err => {dispatch({type: 'REGISTER_ERROR', description: err});\n      });\n   };\n}\n\nexport function logIn(cred, cb) {  \n   return (dispatch, prevState) => {\n      API.logIn(cred)\n      .then((userInfo) => dispatch({type: 'LOGIN', user: userInfo}))\n      .then(() => {if (cb) cb();})\n      .catch(err => {console.log('err is',err);dispatch({type: 'LOGIN_ERR', \n       details: err})});\n      \n   };\n}\n\nexport const insertToken = (email) => dispatch => {\n   let token\n   if (email) {\n     token = email\n     dispatch({\n       type: 'INSERT_TOKEN_SUCCESS',\n       payload: token\n     })\n   } else {\n     dispatch({\n       type: 'INSERT_TOKEN_FAIL'\n     })\n   }\n }"]},"metadata":{},"sourceType":"module"}
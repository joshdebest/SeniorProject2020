{"ast":null,"code":"// Interface to the REST server\nimport { Register } from \"./components/components\";\nimport Auth from \"./redux/Auth\";\nconst baseURL = \"http://localhost:3001/\"; //const baseURL = \"http://www.debestrobotics.com/\";\n\nvar currSessionCookie;\nvar sessionId;\nconst headers = new Headers();\nheaders.set('Content-Type', 'application/JSON');\nconst reqConf = {\n  headers: headers,\n  credentials: 'include'\n};\n\nfunction myFetch(method, endpoint, body) {\n  return fetch(baseURL + endpoint, {\n    method: method,\n    body: body ? JSON.stringify(body) : undefined,\n    ...reqConf\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else return response.json().then(rsp => Object.values(rsp).map(e => errorTranslate(e.tag))).then(errors => {\n      throw errors;\n    });\n  }).catch(err => {\n    let temp = err.toString().indexOf('Type') !== -1 ? [errorTranslate('queryFailed')] : err;\n    throw temp;\n  });\n}\n\nexport function post(endpoint, body) {\n  return myFetch('POST', endpoint, body);\n} // GET/Usr/{email}\n\nexport function get(endpoint, body) {\n  return myFetch('GET', endpoint, body);\n} // GET/Usr \n//export function get(endpoint){\n//   return myFetch('GET', endpoint);\n//}\n\nexport function put(endpoint, body) {\n  return myFetch('PUT', endpoint, body);\n}\nexport function del(endpoint) {\n  return myFetch('DELETE', endpoint);\n} //  Functions for api requests\n\nexport function logIn(creds) {\n  console.log(creds);\n  return post('Ssns/login', creds).then(res => {\n    Auth.setUserToken(res.data.email);\n    return res;\n  });\n}\nexport function logOut() {\n  return del('Ssns/' + currSessionCookie).catch(err => {\n    throw err;\n  });\n}\n/*export function logIn(cred) {\n   return post(\"Ssns\", cred).then(rsp => cred).catch(err => {throw err});\n       .then(response => {\n         let location = response.headers.get(\"Location\").split('/');\n         sessionId = location[location.length - 1];\n         console.log(\"Got session \" + sessionId);\n         return get(\"Ssns/\" + sessionId)\n      })\n      .then(response => response.json())   // ..json() returns a Promise!\n      .then(rsp => get('Prss/' + rsp.prsId))\n      .then(userResponse => userResponse.json())\n      .then(rsp => rsp[0])\n      .catch(err => {console.log('err was this',err);throw err})  \n}*/\n\n/**\n * Register a user\n * @param {Object} User info\n * @returns {Promise resolving to new user registration}\n */\n\nexport function register(newUser) {\n  return post('Usr/register', newUser).then(res => res.json()).catch(err => {\n    throw err;\n  });\n}\n/**\n * @param User email to index database\n * @returns {Promise} json parsed data\n */\n\nexport function getUser(email) {\n  return get('Usr/' + email).then(res => res.json()).catch(err => {\n    throw err;\n  });\n}\nexport const errMap = {\n  en: {\n    failedQuery: \"failedQuery\",\n    // Query failed (server problem)\n    missingField: \"missingField\",\n    // Field missing from request. Params[0] gives field name\n    badValue: \"badValue\",\n    // Field has bad value. Params[0] gives field name\n    userNotFound: \"userNotFound\",\n    // User not present in DB, occurs when the User doesn’t exist\n    sessionNotFound: \"sessionNotFound\",\n    permissionError: \"permissionError\",\n    failedLogin: \"failedLogin\",\n    // Email and password combination invalid\n    duplicateEmail: \"duplicateEmail\",\n    // Duplicate email provided\n    prohibitedRegister: \"prohibitedRegister\",\n    // User tries to create an account while logged in\n    noOldPassword: \"noOldPassword\",\n    // Change of password requires an old password\n    oldPwdIncorrect: \"oldPwdIncorrect\",\n    // Old password that was provided is incorrect\n    dupRegistration: \"dupRegistration\",\n    // Duplicate registration, User already exists\n    prohibitedField: \"prohibitedField\"\n  },\n  es: {\n    failedQuery: \"failedQuery\",\n    // Query failed (server problem)\n    missingField: \"missingField\",\n    // Field missing from request. Params[0] gives field name\n    badValue: \"badValue\",\n    // Field has bad value. Params[0] gives field name\n    userNotFound: \"userNotFound\",\n    // User not present in DB, occurs when the User doesn’t exist\n    sessionNotFound: \"sessionNotFound\",\n    permissionError: \"permissionError\",\n    failedLogin: \"failedLogin\",\n    // Email and password combination invalid\n    duplicateEmail: \"duplicateEmail\",\n    // Duplicate email provided\n    prohibitedRegister: \"prohibitedRegister\",\n    // User tries to create an account while logged in\n    noOldPassword: \"noOldPassword\",\n    // Change of password requires an old password\n    oldPwdIncorrect: \"oldPwdIncorrect\",\n    // Old password that was provided is incorrect\n    dupRegistration: \"dupRegistration\",\n    // Duplicate registration, User already exists\n    prohibitedField: \"prohibitedField\"\n  }\n};\n/**\n * @param {string} errTag\n * @param {string} lang\n */\n\nexport function errorTranslate(errTag, lang = 'en') {\n  return errMap[lang][errTag] || 'Unknown Error!';\n}","map":{"version":3,"sources":["/Users/joshdebest/SeniorProject2020/ClientSide/src/api.js"],"names":["Register","Auth","baseURL","currSessionCookie","sessionId","headers","Headers","set","reqConf","credentials","myFetch","method","endpoint","body","fetch","JSON","stringify","undefined","then","response","ok","json","rsp","Object","values","map","e","errorTranslate","tag","errors","catch","err","temp","toString","indexOf","post","get","put","del","logIn","creds","console","log","res","setUserToken","data","email","logOut","register","newUser","getUser","errMap","en","failedQuery","missingField","badValue","userNotFound","sessionNotFound","permissionError","failedLogin","duplicateEmail","prohibitedRegister","noOldPassword","oldPwdIncorrect","dupRegistration","prohibitedField","es","errTag","lang"],"mappings":"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","sourcesContent":["// Interface to the REST server\n\nimport { Register } from \"./components/components\";\nimport Auth from \"./redux/Auth\";\n\nconst baseURL = \"http://localhost:3001/\";\n//const baseURL = \"http://www.debestrobotics.com/\";\n\nvar currSessionCookie;\nvar sessionId;\n\nconst headers = new Headers();\nheaders.set('Content-Type', 'application/JSON');\nconst reqConf = {\n   headers: headers,\n   credentials: 'include',\n};\n\nfunction myFetch(method, endpoint, body){\n   return fetch(baseURL + endpoint, {\n      method: method,\n      body: (body ? JSON.stringify(body) : undefined),\n      ...reqConf\n   }).then(response => {\n      if (response.ok) {\n         return response;\n      } else\n         return response.json().then(rsp => Object.values(rsp)\n          .map(e => errorTranslate(e.tag)))\n          .then(errors => {throw errors});\n      }).catch(err => {let temp = err.toString().indexOf('Type') !== -1 ? \n      [(errorTranslate('queryFailed'))] :  err; throw temp});  \n}\n\nexport function post(endpoint, body){\n   return myFetch('POST', endpoint, body);\n}\n// GET/Usr/{email}\nexport function get(endpoint, body){\n   return myFetch('GET', endpoint, body);\n}\n// GET/Usr \n//export function get(endpoint){\n//   return myFetch('GET', endpoint);\n//}\n\nexport function put(endpoint, body){\n   return myFetch('PUT', endpoint, body);\n}\nexport function del(endpoint){\n   return myFetch('DELETE', endpoint);\n}\n\n//  Functions for api requests\n\nexport function logIn(creds){\n   console.log(creds);\n   return post('Ssns/login', creds).then(res => {\n         Auth.setUserToken(res.data.email)\n         return res\n   })\n}\n\nexport function logOut(){\n   return del('Ssns/' + currSessionCookie).catch(err => {throw err});\n}\n\n/*export function logIn(cred) {\n   return post(\"Ssns\", cred).then(rsp => cred).catch(err => {throw err});\n       .then(response => {\n         let location = response.headers.get(\"Location\").split('/');\n         sessionId = location[location.length - 1];\n         console.log(\"Got session \" + sessionId);\n         return get(\"Ssns/\" + sessionId)\n      })\n      .then(response => response.json())   // ..json() returns a Promise!\n      .then(rsp => get('Prss/' + rsp.prsId))\n      .then(userResponse => userResponse.json())\n      .then(rsp => rsp[0])\n      .catch(err => {console.log('err was this',err);throw err})  \n}*/\n\n/**\n * Register a user\n * @param {Object} User info\n * @returns {Promise resolving to new user registration}\n */\nexport function register(newUser){\n   return post('Usr/register', newUser).then((res) => res.json()).catch(err => {throw err});\n}\n\n/**\n * @param User email to index database\n * @returns {Promise} json parsed data\n */\nexport function getUser(email) {\n   return get ('Usr/' + email)\n   .then(res => res.json())\n   .catch(err => {throw err});\n}\n\nexport const errMap = {\n   en: {\n      failedQuery: \"failedQuery\",                 // Query failed (server problem)\n      missingField : \"missingField\",              // Field missing from request. Params[0] gives field name\n      badValue : \"badValue\",                      // Field has bad value. Params[0] gives field name\n      userNotFound : \"userNotFound\",              // User not present in DB, occurs when the User doesn’t exist\n      sessionNotFound : \"sessionNotFound\",\n      permissionError : \"permissionError\",\n      failedLogin : \"failedLogin\",                // Email and password combination invalid\n      duplicateEmail : \"duplicateEmail\",          // Duplicate email provided\n      prohibitedRegister : \"prohibitedRegister\",  // User tries to create an account while logged in\n      noOldPassword : \"noOldPassword\",            // Change of password requires an old password\n      oldPwdIncorrect : \"oldPwdIncorrect\",        // Old password that was provided is incorrect\n      dupRegistration : \"dupRegistration\",        // Duplicate registration, User already exists\n      prohibitedField : \"prohibitedField\" \n   },\n   es: {\n      failedQuery: \"failedQuery\",                 // Query failed (server problem)\n      missingField : \"missingField\",              // Field missing from request. Params[0] gives field name\n      badValue : \"badValue\",                      // Field has bad value. Params[0] gives field name\n      userNotFound : \"userNotFound\",              // User not present in DB, occurs when the User doesn’t exist\n      sessionNotFound : \"sessionNotFound\",\n      permissionError : \"permissionError\",\n      failedLogin : \"failedLogin\",                // Email and password combination invalid\n      duplicateEmail : \"duplicateEmail\",          // Duplicate email provided\n      prohibitedRegister : \"prohibitedRegister\",  // User tries to create an account while logged in\n      noOldPassword : \"noOldPassword\",            // Change of password requires an old password\n      oldPwdIncorrect : \"oldPwdIncorrect\",        // Old password that was provided is incorrect\n      dupRegistration : \"dupRegistration\",        // Duplicate registration, User already exists\n      prohibitedField : \"prohibitedField\" \n   }\n}\n\n/**\n * @param {string} errTag\n * @param {string} lang\n */\nexport function errorTranslate(errTag, lang = 'en') {\n   return errMap[lang][errTag] || 'Unknown Error!';\n}\n\n"]},"metadata":{},"sourceType":"module"}